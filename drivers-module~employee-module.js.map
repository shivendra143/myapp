{"version":3,"sources":["webpack:///./src/app/services/city.service.ts","webpack:///./src/app/services/config.ts","webpack:///./src/app/services/country.service.ts","webpack:///./src/app/services/state.service.ts","webpack:///./src/app/services/validation.service.ts"],"names":[],"mappings":"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","file":"drivers-module~employee-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport { environment as env } from '../../environments/environment';\nimport { Config } from '../services/config';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CityService {\n\n  \n config = new Config;\n  constructor(private http: HttpClient ) {}\n\n  getCities(query=\"\") {\n  const uri = env.APIURL + '/cities'+query;\n    return this\n        .http\n        .get(uri);\n  }Y\n\n  addCities(data) {\n    const uri = env.APIURL + '/cities';\n    return this\n        .http\n        .post(uri, data);\n  }\n  updateCities(data,query=\"\") {\n    const uri = env.APIURL + '/cities'+query;\n    return this\n        .http\n        .put(uri, data);\n  }\n  deleteCities(query=\"\") {\n    const uri = env.APIURL + '/cities'+query;\n    return this\n        .http\n        .delete(uri);\n  }\n}\n","import { Headers } from '@angular/http';\r\n\r\nexport class Config {\r\n    headerOptions: any = {\r\n        headers: new Headers({\r\n            'Content-Type': 'application/json'\r\n        })\r\n    }\r\n}","import { Injectable } from '@angular/core';\nimport { Http, Headers, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport { environment as env } from '../../environments/environment';\nimport { Config } from '../services/config';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountryService {\n\n  config = new Config;\n  constructor(private http: HttpClient ) {}\n\n  getCountries(query=\"\") {\n  const uri = env.APIURL + '/countries'+query;\n    return this\n        .http\n        .get(uri);\n  }\n\n  addCountries(data) {\n    const uri = env.APIURL + '/countries';\n    return this\n        .http\n        .post(uri, data);\n  }\n  updateCountries(data,query=\"\") {\n    const uri = env.APIURL + '/countries'+query;\n    return this\n        .http\n        .put(uri, data);\n  }\n  deleteCountries(query=\"\") {\n    const uri = env.APIURL + '/countries'+query;\n    return this\n        .http\n        .delete(uri);\n  }\n\n /* uplodpic(event) {\n    console.log(event)\n       const uri = env.APIURL +'/users/images';\n      const fileList: FileList = event.files;\n      if (fileList.length > 0) {\n          const file = fileList[0];\n  \n          const formData = new FormData();\n          formData.append('flag_128', file, file.name);\n          return this\n          .http\n          .post(uri, formData)\n          .map((res: Response) => {\n              return res.json();\n          })\n          .catch((error: Response) => {\n              error = error.json();\n              return Observable.throw(error);\n          });\n         \n      }\n  }*/\n\n  uploadLogo(event) {\n         const uri = env.APIURL +'/users/images';\n        const fileList: FileList = event.target.files;\n    \n        const file = fileList[0];\n    \n        const formData = new FormData();\n        formData.append('flag_128', file, file.name);\n        return this\n                .http\n                .post(uri,formData);            \n     }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Headers, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport { environment as env } from '../../environments/environment';\nimport { Config } from '../services/config';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StateService {\n\n  config = new Config;\n  constructor(private http: HttpClient ) {}\n\n  getStates(query=\"\") {\n  const uri = env.APIURL + '/states'+query;\n    return this\n        .http\n        .get(uri);\n  }\n\n  addStates(data) {\n    const uri = env.APIURL + '/states';\n    return this\n        .http\n        .post(uri, data);\n  }\n  updateStates(data,query=\"\") {\n    const uri = env.APIURL + '/states'+query\n    return this\n        .http\n        .put(uri, data);\n  }\n\n  deleteStates(query=\"\") {\n    const uri = env.APIURL + '/states'+query\n    alert(uri)\n    return this\n        .http\n        .delete(uri);\n  }\n}\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\nexport class ValidationService {\r\n  static getValidatorErrorMessage(validatorName: string, validatorValue?: any) {\r\n    let config = {\r\n      'required': 'Required',\r\n      'invalidCreditCard': 'Is invalid credit card number',\r\n      'invalidEmailAddress': 'Invalid email address',\r\n      'invalidPassword': 'Invalid password. Password must be at least 6 characters long, and contain a number.',\r\n      'minlength': `Minimum length ${validatorValue.requiredLength}`\r\n    };\r\n\r\n    return config[validatorName];\r\n  }\r\n\r\n  static creditCardValidator(control) {\r\n    // Visa, MasterCard, American Express, Diners Club, Discover, JCB\r\n    if (control.value.match(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/)) {\r\n      return null;\r\n    } else {\r\n      return { 'invalidCreditCard': true };\r\n    }\r\n  }\r\n\r\n  static emailValidator(control) {\r\n    // RFC 2822 compliant regex\r\n    if (control.value.match(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/)) {\r\n      return null;\r\n    } else {\r\n      return { 'invalidEmailAddress': true };\r\n    }\r\n  }\r\n\r\n  static passwordValidator(control) {\r\n    // {6,100}           - Assert password is between 6 and 100 characters\r\n    // (?=.*[0-9])       - Assert a string has at least one number\r\n    if (control.value.match(/^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{6,100}$/)) {\r\n      return null;\r\n    } else {\r\n      return { 'invalidPassword': true };\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}